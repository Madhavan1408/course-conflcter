<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>University Course Conflict Resolver</title>
  <script src="https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js"></script>
  <link href="https://unpkg.com/vis-network@9.1.2/styles/vis-network.min.css" rel="stylesheet" />
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f0f4f8;
      margin: 0;
      padding: 0;
    }

    header {
      background-color: #003366;
      color: white;
      text-align: center;
      padding: 25px;
    }

    main {
      max-width: 1200px;
      margin: auto;
      padding: 30px;
    }

    section {
      background: white;
      padding: 25px;
      margin-bottom: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    h2 {
      color: #003366;
    }

    input {
      width: 100%;
      padding: 10px;
      margin-top: 8px;
      margin-bottom: 15px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    button {
      background: #003366;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background: #0055aa;
    }

    #network {
      width: 100%;
      height: 400px;
      border: 1px solid #ccc;
      margin-top: 20px;
      border-radius: 5px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 12px;
      border: 1px solid #ccc;
      text-align: center;
    }

    th {
      background-color: #003366;
      color: white;
    }

    pre {
      background-color: #f4f4f4;
      padding: 15px;
      overflow-x: auto;
      border-radius: 5px;
      font-size: 14px;
    }
  </style>
</head>
<body>

<header>
  <h1>University Course Conflict Resolver</h1>
  <p>Clash-Free Scheduling Using Graph Colouring</p>
</header>

<main>

  <!-- Module 1: Input -->
  <section>
    <h2>ðŸ“˜ Module 1: Input Course and Conflict Data</h2>
    <form id="manualForm">
      <label>Course Name:</label>
      <input type="text" id="courseName" required placeholder="e.g. CS101">

      <label>Conflicts With (comma-separated):</label>
      <input type="text" id="conflicts" placeholder="e.g. MA101, PH101">

      <button type="submit">Add Course</button>
    </form>
  </section>

  <!-- Graph Visualization -->
  <section>
    <h2>ðŸ“Š Visual Conflict Graph</h2>
    <div id="network"></div>
  </section>

  <!-- Module 2: Graph Colouring -->
  <section>
    <h2>ðŸ“— Module 2: Graph Colouring Algorithm & Timetable</h2>
    <button onclick="generateTimetable()">Generate Timetable</button>

    <div id="algorithmOutput"></div>
    <div id="timetableOutput"></div>
  </section>

</main>

<script>
  const graph = {};
  let nodes = new vis.DataSet();
  let edges = new vis.DataSet();
  let network;

  document.getElementById('manualForm').addEventListener('submit', function (e) {
    e.preventDefault();
    const course = document.getElementById('courseName').value.trim();
    const conflicts = document.getElementById('conflicts').value.split(',').map(c => c.trim()).filter(c => c);

    if (!course) return;

    if (!graph[course]) graph[course] = new Set();
    conflicts.forEach(conflict => {
      if (!graph[conflict]) graph[conflict] = new Set();
      graph[course].add(conflict);
      graph[conflict].add(course);
    });

    document.getElementById('manualForm').reset();
    drawGraph();
  });

  function drawGraph(colorMap = {}) {
    nodes.clear();
    edges.clear();
    const addedEdges = new Set();

    for (let course in graph) {
      nodes.add({
        id: course,
        label: course,
        color: colorMap[course] ? getSlotColor(colorMap[course]) : '#007acc',
        font: { color: '#fff' }
      });

      graph[course].forEach(conflict => {
        const key = [course, conflict].sort().join('-');
        if (!addedEdges.has(key)) {
          edges.add({ from: course, to: conflict });
          addedEdges.add(key);
        }
      });
    }

    const container = document.getElementById('network');
    const data = { nodes, edges };
    const options = {
      interaction: {
        zoomView: false,
        dragView: false
      },
      physics: { stabilization: true }
    };

    network = new vis.Network(container, data, options);
  }

  function generateTimetable() {
    const courses = Object.keys(graph);
    const slots = ["Slot 1", "Slot 2", "Slot 3", "Slot 4", "Slot 5"];
    const colorMap = {};
    const steps = [];

    courses.sort((a, b) => graph[b].size - graph[a].size); // sort by degree

    for (let course of courses) {
      const used = new Set();
      for (let neighbor of graph[course]) {
        if (colorMap[neighbor]) used.add(colorMap[neighbor]);
      }

      const slot = slots.find(s => !used.has(s)) || "No Slot Available";
      colorMap[course] = slot;

      steps.push(ðŸŽ¯ Course: ${course}\nâ†’ Conflicts with: ${[...graph[course]].join(', ')}\nâ†’ Used Slots: ${[...used].join(', ') || 'None'}\nâ†’ Assigned: ${slot});
    }

    showAlgorithmSteps(steps);
    showTimetable(colorMap);
    drawGraph(colorMap);
  }

  function showAlgorithmSteps(steps) {
    const output = document.getElementById('algorithmOutput');
    output.innerHTML = <h3>ðŸ§  Graph Colouring Steps (Greedy Algorithm)</h3><pre>${steps.join('\n\n')}</pre>;
  }

  function showTimetable(colorMap) {
    const table = `
      <h3>ðŸ“… Clash-Free Timetable</h3>
      <table>
        <tr><th>Course</th><th>Assigned Slot</th></tr>
        ${Object.entries(colorMap).map(([course, slot]) => <tr><td>${course}</td><td>${slot}</td></tr>).join('')}
      </table>
    `;
    document.getElementById('timetableOutput').innerHTML = table;
  }

  function getSlotColor(slot) {
    const slotColors = {
      "Slot 1": "#1f77b4",
      "Slot 2": "#2ca02c",
      "Slot 3": "#ff7f0e",
      "Slot 4": "#d62728",
      "Slot 5": "#9467bd",
      "No Slot Available": "#999999"
    };
    return slotColors[slot] || "#007acc";
  }
</script>

</body>
</html>
